// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErpServiceClient is the client API for ErpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErpServiceClient interface {
	// StartLocalOrganisation starts a Organisation on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the erp/config.yaml
	//   3. all bytes constituting the Organisation YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalOrganisation(ctx context.Context, opts ...grpc.CallOption) (ErpService_StartLocalOrganisationClient, error)
	// StartFromPreviousOrganisation starts a new Organisation based on a previous one.
	// If the previous Organisation does not have the can-replay condition set this call will result in an error.
	StartFromPreviousOrganisation(ctx context.Context, in *StartFromPreviousOrganisationRequest, opts ...grpc.CallOption) (*StartOrganisationResponse, error)
	// StartOrganisationRequest starts a new Organisation based on its specification.
	StartOrganisation(ctx context.Context, in *StartOrganisationRequest, opts ...grpc.CallOption) (*StartOrganisationResponse, error)
	// Searches for Organisation(s) known to this instance
	ListOrganisations(ctx context.Context, in *ListOrganisationsRequest, opts ...grpc.CallOption) (*ListOrganisationsResponse, error)
	// Subscribe listens to new Organisation(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ErpService_SubscribeClient, error)
	// GetOrganisation retrieves details of a single Organisation
	GetOrganisation(ctx context.Context, in *GetOrganisationRequest, opts ...grpc.CallOption) (*GetOrganisationResponse, error)
	// Listen listens to Organisation updates and log output of a running Organisation
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ErpService_ListenClient, error)
	// StopOrganisation stops a currently running Organisation
	StopOrganisation(ctx context.Context, in *StopOrganisationRequest, opts ...grpc.CallOption) (*StopOrganisationResponse, error)
}

type erpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErpServiceClient(cc grpc.ClientConnInterface) ErpServiceClient {
	return &erpServiceClient{cc}
}

func (c *erpServiceClient) StartLocalOrganisation(ctx context.Context, opts ...grpc.CallOption) (ErpService_StartLocalOrganisationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ErpService_ServiceDesc.Streams[0], "/v1.ErpService/StartLocalOrganisation", opts...)
	if err != nil {
		return nil, err
	}
	x := &erpServiceStartLocalOrganisationClient{stream}
	return x, nil
}

type ErpService_StartLocalOrganisationClient interface {
	Send(*StartLocalOrganisationRequest) error
	CloseAndRecv() (*StartOrganisationResponse, error)
	grpc.ClientStream
}

type erpServiceStartLocalOrganisationClient struct {
	grpc.ClientStream
}

func (x *erpServiceStartLocalOrganisationClient) Send(m *StartLocalOrganisationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *erpServiceStartLocalOrganisationClient) CloseAndRecv() (*StartOrganisationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartOrganisationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *erpServiceClient) StartFromPreviousOrganisation(ctx context.Context, in *StartFromPreviousOrganisationRequest, opts ...grpc.CallOption) (*StartOrganisationResponse, error) {
	out := new(StartOrganisationResponse)
	err := c.cc.Invoke(ctx, "/v1.ErpService/StartFromPreviousOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erpServiceClient) StartOrganisation(ctx context.Context, in *StartOrganisationRequest, opts ...grpc.CallOption) (*StartOrganisationResponse, error) {
	out := new(StartOrganisationResponse)
	err := c.cc.Invoke(ctx, "/v1.ErpService/StartOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erpServiceClient) ListOrganisations(ctx context.Context, in *ListOrganisationsRequest, opts ...grpc.CallOption) (*ListOrganisationsResponse, error) {
	out := new(ListOrganisationsResponse)
	err := c.cc.Invoke(ctx, "/v1.ErpService/ListOrganisations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erpServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ErpService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ErpService_ServiceDesc.Streams[1], "/v1.ErpService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &erpServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ErpService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type erpServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *erpServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *erpServiceClient) GetOrganisation(ctx context.Context, in *GetOrganisationRequest, opts ...grpc.CallOption) (*GetOrganisationResponse, error) {
	out := new(GetOrganisationResponse)
	err := c.cc.Invoke(ctx, "/v1.ErpService/GetOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erpServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ErpService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ErpService_ServiceDesc.Streams[2], "/v1.ErpService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &erpServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ErpService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type erpServiceListenClient struct {
	grpc.ClientStream
}

func (x *erpServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *erpServiceClient) StopOrganisation(ctx context.Context, in *StopOrganisationRequest, opts ...grpc.CallOption) (*StopOrganisationResponse, error) {
	out := new(StopOrganisationResponse)
	err := c.cc.Invoke(ctx, "/v1.ErpService/StopOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErpServiceServer is the server API for ErpService service.
// All implementations must embed UnimplementedErpServiceServer
// for forward compatibility
type ErpServiceServer interface {
	// StartLocalOrganisation starts a Organisation on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the erp/config.yaml
	//   3. all bytes constituting the Organisation YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalOrganisation(ErpService_StartLocalOrganisationServer) error
	// StartFromPreviousOrganisation starts a new Organisation based on a previous one.
	// If the previous Organisation does not have the can-replay condition set this call will result in an error.
	StartFromPreviousOrganisation(context.Context, *StartFromPreviousOrganisationRequest) (*StartOrganisationResponse, error)
	// StartOrganisationRequest starts a new Organisation based on its specification.
	StartOrganisation(context.Context, *StartOrganisationRequest) (*StartOrganisationResponse, error)
	// Searches for Organisation(s) known to this instance
	ListOrganisations(context.Context, *ListOrganisationsRequest) (*ListOrganisationsResponse, error)
	// Subscribe listens to new Organisation(s) updates
	Subscribe(*SubscribeRequest, ErpService_SubscribeServer) error
	// GetOrganisation retrieves details of a single Organisation
	GetOrganisation(context.Context, *GetOrganisationRequest) (*GetOrganisationResponse, error)
	// Listen listens to Organisation updates and log output of a running Organisation
	Listen(*ListenRequest, ErpService_ListenServer) error
	// StopOrganisation stops a currently running Organisation
	StopOrganisation(context.Context, *StopOrganisationRequest) (*StopOrganisationResponse, error)
	mustEmbedUnimplementedErpServiceServer()
}

// UnimplementedErpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedErpServiceServer struct {
}

func (UnimplementedErpServiceServer) StartLocalOrganisation(ErpService_StartLocalOrganisationServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalOrganisation not implemented")
}
func (UnimplementedErpServiceServer) StartFromPreviousOrganisation(context.Context, *StartFromPreviousOrganisationRequest) (*StartOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousOrganisation not implemented")
}
func (UnimplementedErpServiceServer) StartOrganisation(context.Context, *StartOrganisationRequest) (*StartOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOrganisation not implemented")
}
func (UnimplementedErpServiceServer) ListOrganisations(context.Context, *ListOrganisationsRequest) (*ListOrganisationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganisations not implemented")
}
func (UnimplementedErpServiceServer) Subscribe(*SubscribeRequest, ErpService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedErpServiceServer) GetOrganisation(context.Context, *GetOrganisationRequest) (*GetOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganisation not implemented")
}
func (UnimplementedErpServiceServer) Listen(*ListenRequest, ErpService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedErpServiceServer) StopOrganisation(context.Context, *StopOrganisationRequest) (*StopOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOrganisation not implemented")
}
func (UnimplementedErpServiceServer) mustEmbedUnimplementedErpServiceServer() {}

// UnsafeErpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErpServiceServer will
// result in compilation errors.
type UnsafeErpServiceServer interface {
	mustEmbedUnimplementedErpServiceServer()
}

func RegisterErpServiceServer(s grpc.ServiceRegistrar, srv ErpServiceServer) {
	s.RegisterService(&ErpService_ServiceDesc, srv)
}

func _ErpService_StartLocalOrganisation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ErpServiceServer).StartLocalOrganisation(&erpServiceStartLocalOrganisationServer{stream})
}

type ErpService_StartLocalOrganisationServer interface {
	SendAndClose(*StartOrganisationResponse) error
	Recv() (*StartLocalOrganisationRequest, error)
	grpc.ServerStream
}

type erpServiceStartLocalOrganisationServer struct {
	grpc.ServerStream
}

func (x *erpServiceStartLocalOrganisationServer) SendAndClose(m *StartOrganisationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *erpServiceStartLocalOrganisationServer) Recv() (*StartLocalOrganisationRequest, error) {
	m := new(StartLocalOrganisationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ErpService_StartFromPreviousOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErpServiceServer).StartFromPreviousOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ErpService/StartFromPreviousOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErpServiceServer).StartFromPreviousOrganisation(ctx, req.(*StartFromPreviousOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErpService_StartOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErpServiceServer).StartOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ErpService/StartOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErpServiceServer).StartOrganisation(ctx, req.(*StartOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErpService_ListOrganisations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganisationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErpServiceServer).ListOrganisations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ErpService/ListOrganisations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErpServiceServer).ListOrganisations(ctx, req.(*ListOrganisationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErpService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ErpServiceServer).Subscribe(m, &erpServiceSubscribeServer{stream})
}

type ErpService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type erpServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *erpServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ErpService_GetOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErpServiceServer).GetOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ErpService/GetOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErpServiceServer).GetOrganisation(ctx, req.(*GetOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErpService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ErpServiceServer).Listen(m, &erpServiceListenServer{stream})
}

type ErpService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type erpServiceListenServer struct {
	grpc.ServerStream
}

func (x *erpServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ErpService_StopOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErpServiceServer).StopOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ErpService/StopOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErpServiceServer).StopOrganisation(ctx, req.(*StopOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErpService_ServiceDesc is the grpc.ServiceDesc for ErpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ErpService",
	HandlerType: (*ErpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousOrganisation",
			Handler:    _ErpService_StartFromPreviousOrganisation_Handler,
		},
		{
			MethodName: "StartOrganisation",
			Handler:    _ErpService_StartOrganisation_Handler,
		},
		{
			MethodName: "ListOrganisations",
			Handler:    _ErpService_ListOrganisations_Handler,
		},
		{
			MethodName: "GetOrganisation",
			Handler:    _ErpService_GetOrganisation_Handler,
		},
		{
			MethodName: "StopOrganisation",
			Handler:    _ErpService_StopOrganisation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalOrganisation",
			Handler:       _ErpService_StartLocalOrganisation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ErpService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _ErpService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "erp.proto",
}
